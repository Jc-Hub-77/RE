"""create_initial_tables

Revision ID: 0000_create_initial_tables
Revises: 
Create Date: 2025-06-10 09:03:00.000000 

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import datetime

# revision identifiers, used by Alembic.
revision: str = '0000_create_initial_tables'
down_revision: Union[str, None] = None # This is the first migration
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('username', sa.String(), nullable=False),
        sa.Column('email', sa.String(), nullable=False),
        sa.Column('password_hash', sa.String(), nullable=False),
        sa.Column('email_verified', sa.Boolean(), nullable=True),
        sa.Column('is_admin', sa.Boolean(), nullable=True),
        sa.Column('referral_code', sa.String(), nullable=True),
        sa.Column('referred_by_user_id', sa.Integer(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.Column('email_verification_token', sa.String(), nullable=True),
        sa.Column('email_verification_token_expires_at', sa.DateTime(), nullable=True),
        sa.Column('password_reset_token', sa.String(), nullable=True),
        sa.Column('password_reset_token_expires_at', sa.DateTime(), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=True),
        sa.Column('last_password_change_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['referred_by_user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('email_verification_token'),
        sa.UniqueConstraint('password_reset_token')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_referral_code'), 'users', ['referral_code'], unique=True)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)

    op.create_table('profiles',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('full_name', sa.String(), nullable=True),
        sa.Column('bio', sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('user_id')
    )
    op.create_index(op.f('ix_profiles_full_name'), 'profiles', ['full_name'], unique=False)
    op.create_index(op.f('ix_profiles_id'), 'profiles', ['id'], unique=False)

    op.create_table('api_keys',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('exchange_name', sa.String(), nullable=False),
        sa.Column('label', sa.String(), nullable=True),
        sa.Column('api_key_public_preview', sa.String(), nullable=True),
        sa.Column('encrypted_api_key', sa.Text(), nullable=False),
        sa.Column('encrypted_secret_key', sa.Text(), nullable=False),
        sa.Column('encrypted_passphrase', sa.Text(), nullable=True),
        sa.Column('status', sa.String(), nullable=True),
        sa.Column('status_message', sa.Text(), nullable=True),
        sa.Column('last_tested_at', sa.DateTime(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_api_keys_exchange_name'), 'api_keys', ['exchange_name'], unique=False)
    op.create_index(op.f('ix_api_keys_id'), 'api_keys', ['id'], unique=False)
    op.create_index(op.f('ix_api_keys_status'), 'api_keys', ['status'], unique=False)

    op.create_table('strategies',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('python_code_path', sa.String(), nullable=False),
        sa.Column('default_parameters', sa.Text(), nullable=True),
        sa.Column('category', sa.String(), nullable=True),
        sa.Column('risk_level', sa.String(), nullable=True),
        sa.Column('historical_performance_summary', sa.Text(), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.Column('payment_options_json', sa.Text(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_strategies_id'), 'strategies', ['id'], unique=False)

    op.create_table('backtest_results',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('strategy_name_used', sa.String(), nullable=False),
        sa.Column('strategy_code_snapshot', sa.Text(), nullable=True),
        sa.Column('custom_parameters_json', sa.Text(), nullable=True),
        sa.Column('start_date', sa.DateTime(), nullable=False),
        sa.Column('end_date', sa.DateTime(), nullable=False),
        sa.Column('timeframe', sa.String(), nullable=False),
        sa.Column('symbol', sa.String(), nullable=False),
        sa.Column('pnl', sa.Float(), nullable=True),
        sa.Column('sharpe_ratio', sa.Float(), nullable=True),
        sa.Column('max_drawdown', sa.Float(), nullable=True),
        sa.Column('total_trades', sa.Integer(), nullable=True),
        sa.Column('winning_trades', sa.Integer(), nullable=True),
        sa.Column('losing_trades', sa.Integer(), nullable=True),
        sa.Column('trades_log_json', sa.Text(), nullable=True),
        sa.Column('equity_curve_json', sa.Text(), nullable=True),
        sa.Column('status', sa.String(), nullable=True),
        sa.Column('celery_task_id', sa.String(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_backtest_results_celery_task_id'), 'backtest_results', ['celery_task_id'], unique=False)
    op.create_index(op.f('ix_backtest_results_id'), 'backtest_results', ['id'], unique=False)
    op.create_index(op.f('ix_backtest_results_status'), 'backtest_results', ['status'], unique=False)
    op.create_index(op.f('ix_backtest_results_strategy_name_used'), 'backtest_results', ['strategy_name_used'], unique=False)
    op.create_index(op.f('ix_backtest_results_symbol'), 'backtest_results', ['symbol'], unique=False)
    
    op.create_table('referrals',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('referrer_user_id', sa.Integer(), nullable=False),
        sa.Column('referred_user_id', sa.Integer(), nullable=False),
        sa.Column('signed_up_at', sa.DateTime(), nullable=True),
        sa.Column('first_payment_at', sa.DateTime(), nullable=True),
        sa.Column('commission_earned_total', sa.Float(), nullable=True),
        sa.Column('commission_pending_payout', sa.Float(), nullable=True),
        sa.Column('commission_paid_out_total', sa.Float(), nullable=True),
        sa.Column('last_payout_date', sa.DateTime(), nullable=True),
        sa.Column('is_active_for_commission', sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(['referred_user_id'], ['users.id'], ),
        sa.ForeignKeyConstraint(['referrer_user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('referred_user_id')
    )
    op.create_index(op.f('ix_referrals_id'), 'referrals', ['id'], unique=False)

    op.create_table('referral_payout_logs',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('referral_id', sa.Integer(), nullable=False),
        sa.Column('admin_user_id', sa.Integer(), nullable=True),
        sa.Column('amount_paid', sa.Float(), nullable=False),
        sa.Column('payout_initiated_at', sa.DateTime(), nullable=True),
        sa.Column('notes', sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(['admin_user_id'], ['users.id'], ),
        sa.ForeignKeyConstraint(['referral_id'], ['referrals.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_referral_payout_logs_admin_user_id'), 'referral_payout_logs', ['admin_user_id'], unique=False)
    op.create_index(op.f('ix_referral_payout_logs_id'), 'referral_payout_logs', ['id'], unique=False)
    op.create_index(op.f('ix_referral_payout_logs_referral_id'), 'referral_payout_logs', ['referral_id'], unique=False)

    op.create_table('system_settings',
        sa.Column('key', sa.String(length=100), nullable=False),
        sa.Column('value', sa.Text(), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint('key')
    )
    op.create_index(op.f('ix_system_settings_key'), 'system_settings', ['key'], unique=False)

    # Note: user_strategy_subscriptions, orders, positions, payment_transactions are created by subsequent migrations
    # or should be if their creation depends on these base tables.
    # For now, ensuring payment_transactions is created here as it's a point of failure.
    op.create_table('payment_transactions',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('user_strategy_subscription_id', sa.Integer(), nullable=True), # FK to user_strategy_subscriptions will be added by its own migration
        sa.Column('amount_crypto', sa.Float(), nullable=False),
        sa.Column('crypto_currency', sa.String(), nullable=False),
        sa.Column('usd_equivalent', sa.Float(), nullable=True),
        sa.Column('payment_gateway', sa.String(), nullable=True),
        sa.Column('gateway_transaction_id', sa.String(), nullable=True),
        sa.Column('internal_reference', sa.String(), nullable=True),
        sa.Column('status', sa.String(), nullable=True),
        sa.Column('description', sa.Text(), nullable=True),
        # gateway_metadata_json will be added by migration 66d23d22d253
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        # sa.ForeignKeyConstraint(['user_strategy_subscription_id'], ['user_strategy_subscriptions.id'], ), # Add this constraint later if user_strategy_subscriptions is created by another migration
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_payment_transactions_gateway_transaction_id'), 'payment_transactions', ['gateway_transaction_id'], unique=True)
    op.create_index(op.f('ix_payment_transactions_id'), 'payment_transactions', ['id'], unique=False)
    op.create_index(op.f('ix_payment_transactions_internal_reference'), 'payment_transactions', ['internal_reference'], unique=True)
    op.create_index(op.f('ix_payment_transactions_status'), 'payment_transactions', ['status'], unique=False)

    # Orders and Positions (from original 9feeb80d8c05)
    # These depend on user_strategy_subscriptions, which is created by dc7a444085b0.
    # It's better if their creation is handled by a migration that runs *after* user_strategy_subscriptions is created.
    # For now, I will include them here but comment out the FK to user_strategy_subscriptions.
    # This FK should be added by the migration that creates user_strategy_subscriptions or one after it.

    op.create_table('orders',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('subscription_id', sa.Integer(), nullable=False), # This will be an FK later
        sa.Column('order_id', sa.String(), nullable=True),
        sa.Column('symbol', sa.String(), nullable=False),
        sa.Column('order_type', sa.String(), nullable=False),
        sa.Column('side', sa.String(), nullable=False),
        sa.Column('amount', sa.Float(), nullable=False),
        sa.Column('price', sa.Float(), nullable=True),
        sa.Column('cost', sa.Float(), nullable=True),
        sa.Column('filled', sa.Float(), nullable=True),
        sa.Column('remaining', sa.Float(), nullable=True),
        sa.Column('status', sa.String(), nullable=True, default='open'),
        sa.Column('created_at', sa.DateTime(), nullable=True, default=datetime.datetime.utcnow),
        sa.Column('updated_at', sa.DateTime(), nullable=True, default=datetime.datetime.utcnow, onupdate=datetime.datetime.utcnow),
        sa.Column('closed_at', sa.DateTime(), nullable=True),
        # raw_order_data will be added by migration 6ca05d1600df
        sa.PrimaryKeyConstraint('id')
        # sa.ForeignKeyConstraint(['subscription_id'], ['user_strategy_subscriptions.id'], ), # Add later
    )
    op.create_index(op.f('ix_orders_id'), 'orders', ['id'], unique=False)
    op.create_index(op.f('ix_orders_order_id'), 'orders', ['order_id'], unique=False)
    op.create_index(op.f('ix_orders_status'), 'orders', ['status'], unique=False)

    op.create_table('positions',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('subscription_id', sa.Integer(), nullable=False), # This will be an FK later
        sa.Column('symbol', sa.String(), nullable=False),
        sa.Column('exchange_name', sa.String(), nullable=False),
        sa.Column('side', sa.String(), nullable=False),
        sa.Column('amount', sa.Float(), nullable=False),
        sa.Column('entry_price', sa.Float(), nullable=True),
        sa.Column('current_price', sa.Float(), nullable=True),
        sa.Column('is_open', sa.Boolean(), nullable=True, default=True),
        sa.Column('created_at', sa.DateTime(), nullable=True, default=datetime.datetime.utcnow),
        sa.Column('updated_at', sa.DateTime(), nullable=True, default=datetime.datetime.utcnow, onupdate=datetime.datetime.utcnow),
        sa.Column('closed_at', sa.DateTime(), nullable=True),
        sa.Column('pnl', sa.Float(), nullable=True),
        sa.PrimaryKeyConstraint('id')
        # sa.ForeignKeyConstraint(['subscription_id'], ['user_strategy_subscriptions.id'], ), # Add later
    )
    op.create_index(op.f('ix_positions_id'), 'positions', ['id'], unique=False)
    op.create_index(op.f('ix_positions_is_open'), 'positions', ['is_open'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_positions_is_open'), table_name='positions')
    op.drop_index(op.f('ix_positions_id'), table_name='positions')
    op.drop_table('positions')

    op.drop_index(op.f('ix_orders_status'), table_name='orders')
    op.drop_index(op.f('ix_orders_order_id'), table_name='orders')
    op.drop_index(op.f('ix_orders_id'), table_name='orders')
    op.drop_table('orders')

    op.drop_index(op.f('ix_payment_transactions_status'), table_name='payment_transactions')
    op.drop_index(op.f('ix_payment_transactions_internal_reference'), table_name='payment_transactions')
    op.drop_index(op.f('ix_payment_transactions_id'), table_name='payment_transactions')
    op.drop_index(op.f('ix_payment_transactions_gateway_transaction_id'), table_name='payment_transactions')
    op.drop_table('payment_transactions')
    
    op.drop_index(op.f('ix_system_settings_key'), table_name='system_settings')
    op.drop_table('system_settings')

    op.drop_index(op.f('ix_referral_payout_logs_referral_id'), table_name='referral_payout_logs')
    op.drop_index(op.f('ix_referral_payout_logs_id'), table_name='referral_payout_logs')
    op.drop_index(op.f('ix_referral_payout_logs_admin_user_id'), table_name='referral_payout_logs')
    op.drop_table('referral_payout_logs')

    op.drop_index(op.f('ix_referrals_id'), table_name='referrals')
    op.drop_table('referrals')

    op.drop_index(op.f('ix_backtest_results_symbol'), table_name='backtest_results')
    op.drop_index(op.f('ix_backtest_results_strategy_name_used'), table_name='backtest_results')
    op.drop_index(op.f('ix_backtest_results_status'), table_name='backtest_results')
    op.drop_index(op.f('ix_backtest_results_id'), table_name='backtest_results')
    op.drop_index(op.f('ix_backtest_results_celery_task_id'), table_name='backtest_results')
    op.drop_table('backtest_results')

    op.drop_index(op.f('ix_strategies_id'), table_name='strategies')
    op.drop_table('strategies')

    op.drop_index(op.f('ix_api_keys_status'), table_name='api_keys')
    op.drop_index(op.f('ix_api_keys_id'), table_name='api_keys')
    op.drop_index(op.f('ix_api_keys_exchange_name'), table_name='api_keys')
    op.drop_table('api_keys')

    op.drop_index(op.f('ix_profiles_id'), table_name='profiles')
    op.drop_index(op.f('ix_profiles_full_name'), table_name='profiles')
    op.drop_table('profiles')

    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_referral_code'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###